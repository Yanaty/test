{"version":3,"sources":["logo.svg","App.js","serviceWorker.js"],"names":["module","exports","__webpack_require__","p","ProductCategoryRow","react_default","a","createElement","colSpan","this","props","category","React","Component","ProductRow","name","product","stocked","style","color","price","ProductTable","_this","rows","lastCategory","products","forEach","indexOf","filterText","inStockOnly","push","App_ProductCategoryRow","key","App_ProductRow","SearchBar","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","onUserInput","filterTextInput","value","inStockOnlyInput","checked","_this3","type","placeholder","ref","input","onChange","FilterableProductTable","_this4","state","people","handleUserInput","_this5","axios","get","then","res","data","setState","App_SearchBar","App_ProductTable","ReactDOM","render","App_FilterableProductTable","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.82b60ccd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\nclass ProductCategoryRow extends React.Component {\n  render() {\n    return (<tr><th colSpan=\"2\">{this.props.category}</th></tr>);\n  }\n}\n\nclass ProductRow extends React.Component {\n  render() {\n    var name = this.props.product.stocked ?\n      this.props.product.name :\n      <span style={{color: 'red'}}>\n        {this.props.product.name}\n      </span>;\n    return (\n      <tr>\n        <td>{name}</td>\n        <td>{this.props.product.price}</td>\n      </tr>\n    );\n  }\n}\n\nclass ProductTable extends React.Component {\n  render() {\n    var rows = [];\n    var lastCategory = null;\n    this.props.products.forEach((product) => {\n      if (product.name.indexOf(this.props.filterText) === -1 || (!product.stocked && this.props.inStockOnly)) {\n        return;\n      }\n      if (product.category !== lastCategory) {\n        rows.push(<ProductCategoryRow category={product.category} key={product.category} />);\n      }\n      rows.push(<ProductRow product={product} key={product.name} />);\n      lastCategory = product.category;\n    });\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    );\n  }\n}\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange() {\n    this.props.onUserInput(\n      this.filterTextInput.value,\n      this.inStockOnlyInput.checked\n    );\n  }\n\n  render() {\n    return (\n      <form>\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={this.props.filterText}\n          ref={(input) => this.filterTextInput = input}\n          onChange={this.handleChange}\n        />\n        <p>\n          <input\n            type=\"checkbox\"\n            checked={this.props.inStockOnly}\n            ref={(input) => this.inStockOnlyInput = input}\n            onChange={this.handleChange}\n          />\n          {' '}\n          Only show products in stock\n        </p>\n      </form>\n    );\n  }\n}\n\nclass FilterableProductTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterText: '',\n      inStockOnly: false,\n      people: []\n    };\n\n    this.handleUserInput = this.handleUserInput.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get('https://github.com/axios/axios.git')\n      .then(res => {\n        const people= res.data;\n        this.setState({ people});\n      })\n  }\n\n  handleUserInput(filterText, inStockOnly) {\n    this.setState({\n      filterText: filterText,\n      inStockOnly: inStockOnly\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <SearchBar\n          filterText={this.state.filterText}\n          inStockOnly={this.state.inStockOnly}\n          onUserInput={this.handleUserInput}\n        />\n        <ProductTable\n          products={this.props.products}\n          filterText={this.state.filterText}\n          inStockOnly={this.state.inStockOnly}\n        />\n      </div>\n    );\n  }\n}\n\nvar PRODUCTS = [\n  {category: 'Sporting Goods', price: '$49.99', stocked: true, name: 'Football'},\n  {category: 'Sporting Goods', price: '$9.99', stocked: true, name: 'Baseball'},\n  {category: 'Sporting Goods', price: '$29.99', stocked: false, name: 'Basketball'},\n  {category: 'Electronics', price: '$99.99', stocked: true, name: 'iPod Touch'},\n  {category: 'Electronics', price: '$399.99', stocked: false, name: 'iPhone 5'},\n  {category: 'Electronics', price: '$199.99', stocked: true, name: 'Nexus 7'}\n];\n\nReactDOM.render(\n  <FilterableProductTable products={PRODUCTS} />,\n  document.getElementById('root')\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}